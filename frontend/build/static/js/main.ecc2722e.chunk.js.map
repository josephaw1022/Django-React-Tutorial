{"version":3,"sources":["components/Modal.js","App.js","index.js"],"names":["CustomModal","props","handleChange","e","target","name","value","type","checked","activeItem","state","setState","this","toggle","onSave","Modal","isOpen","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","title","onChange","placeholder","description","check","completed","ModalFooter","Button","color","onClick","Component","App","refreshList","axios","get","then","res","todoList","data","catch","err","console","log","displayCompleted","status","viewCompleted","renderTabList","className","renderItems","filter","item","map","editItem","handleDelete","id","modal","handleSubmit","put","post","delete","createItem","ReactDOM","render","document","getElementById"],"mappings":"0SAesBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAKRC,aAAe,SAAAC,GAAM,IAAD,EACIA,EAAEC,OAAlBC,EADY,EACZA,KAAMC,EADM,EACNA,MACU,aAAlBH,EAAEC,OAAOG,OACXD,EAAQH,EAAEC,OAAOI,SAEnB,IAAMC,EAAU,2BAAQ,EAAKC,MAAMD,YAAnB,kBAAgCJ,EAAOC,IACvD,EAAKK,SAAS,CAAEF,gBAVhB,EAAKC,MAAQ,CACXD,WAAY,EAAKR,MAAMQ,YAHR,E,qDAcT,IAAD,SACoBG,KAAKX,MAAxBY,EADD,EACCA,OAAQC,EADT,EACSA,OAChB,OACE,eAACC,EAAA,EAAD,CAAOC,QAAQ,EAAMH,OAAQA,EAA7B,UACE,cAACI,EAAA,EAAD,CAAaJ,OAAQA,EAArB,yBACA,cAACK,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAOC,IAAI,QAAX,mBACA,cAACC,EAAA,EAAD,CACEhB,KAAK,OACLF,KAAK,QACLC,MAAOM,KAAKF,MAAMD,WAAWe,MAC7BC,SAAUb,KAAKV,aACfwB,YAAY,wBAGhB,eAACN,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAOC,IAAI,cAAX,yBACA,cAACC,EAAA,EAAD,CACEhB,KAAK,OACLF,KAAK,cACLC,MAAOM,KAAKF,MAAMD,WAAWkB,YAC7BF,SAAUb,KAAKV,aACfwB,YAAY,8BAGhB,cAACN,EAAA,EAAD,CAAWQ,OAAK,EAAhB,SACE,eAACP,EAAA,EAAD,CAAOC,IAAI,YAAX,UACE,cAACC,EAAA,EAAD,CACEhB,KAAK,WACLF,KAAK,YACLG,QAASI,KAAKF,MAAMD,WAAWoB,UAC/BJ,SAAUb,KAAKV,eALnB,sBAYN,cAAC4B,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAS,kBAAMnB,EAAO,EAAKJ,MAAMD,aAAzD,2B,GAxD+ByB,a,iBCmI1BC,E,kDA3Ib,WAAYlC,GAAQ,IAAD,8BACjB,cAAMA,IAcRmC,YAAc,WACZC,IACGC,IAAI,oCACJC,MAAK,SAAAC,GAAG,OAAI,EAAK7B,SAAS,CAAE8B,SAAUD,EAAIE,UAC1CC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OAnBX,EAqBnBG,iBAAmB,SAAAC,GACjB,OAAIA,EACK,EAAKrC,SAAS,CAAEsC,eAAe,IAEjC,EAAKtC,SAAS,CAAEsC,eAAe,KAzBrB,EA2BnBC,cAAgB,WACd,OACE,sBAAKC,UAAU,gBAAf,UACE,sBACElB,QAAS,kBAAM,EAAKc,kBAAiB,IACrCI,UAAW,EAAKzC,MAAMuC,cAAgB,SAAW,GAFnD,sBAMA,sBACEhB,QAAS,kBAAM,EAAKc,kBAAiB,IACrCI,UAAW,EAAKzC,MAAMuC,cAAgB,GAAK,SAF7C,4BApCa,EA6CnBG,YAAc,WAAO,IACXH,EAAkB,EAAKvC,MAAvBuC,cAIR,OAHiB,EAAKvC,MAAM+B,SAASY,QACnC,SAAAC,GAAI,OAAIA,EAAKzB,YAAcoB,KAEbM,KAAI,SAAAD,GAAI,OACtB,qBAEEH,UAAU,oEAFZ,UAIE,sBACEA,UAAS,0BACP,EAAKzC,MAAMuC,cAAgB,iBAAmB,IAEhDzB,MAAO8B,EAAK3B,YAJd,SAMG2B,EAAK9B,QAER,iCAEE,yBACES,QAAS,kBAAM,EAAKuB,SAASF,IAC7BH,UAAU,yBAFZ,UAIG,IAJH,OAKO,OAEP,yBACElB,QAAS,kBAAM,EAAKwB,aAAaH,IACjCH,UAAU,iBAFZ,mBAIS,YAxBNG,EAAKI,QApDG,EAkFnB7C,OAAS,WACP,EAAKF,SAAS,CAAEgD,OAAQ,EAAKjD,MAAMiD,SAnFlB,EAqFnBC,aAAe,SAAAN,GACb,EAAKzC,SACDyC,EAAKI,GACPrB,IACGwB,IADH,0CAC0CP,EAAKI,GAD/C,KACsDJ,GACnDf,MAAK,SAAAC,GAAG,OAAI,EAAKJ,iBAGtBC,IACGyB,KAAK,mCAAoCR,GACzCf,MAAK,SAAAC,GAAG,OAAI,EAAKJ,kBA/FH,EAiGnBqB,aAAe,SAAAH,GACbjB,IACG0B,OADH,0CAC6CT,EAAKI,KAC/CnB,MAAK,SAAAC,GAAG,OAAI,EAAKJ,kBApGH,EAsGnB4B,WAAa,WAEX,EAAKrD,SAAS,CAAEF,WADH,CAAEe,MAAO,GAAIG,YAAa,GAAIE,WAAW,GACpB8B,OAAQ,EAAKjD,MAAMiD,SAxGpC,EA0GnBH,SAAW,SAAAF,GACT,EAAK3C,SAAS,CAAEF,WAAY6C,EAAMK,OAAQ,EAAKjD,MAAMiD,SAzGrD,EAAKjD,MAAQ,CACXuC,eAAe,EACfxC,WAAY,CACVe,MAAO,GACPG,YAAa,GACbE,WAAW,GAEbY,SAAU,IATK,E,gEAajB7B,KAAKwB,gB,+BAiGL,OACE,uBAAMe,UAAU,UAAhB,UACE,oBAAIA,UAAU,6CAAd,sBACA,qBAAKA,UAAU,OAAf,SACE,qBAAKA,UAAU,iCAAf,SACE,sBAAKA,UAAU,WAAf,UACE,qBAAKA,UAAU,GAAf,SACE,wBAAQlB,QAASrB,KAAKoD,WAAYb,UAAU,kBAA5C,wBAIDvC,KAAKsC,gBACN,oBAAIC,UAAU,8BAAd,SACGvC,KAAKwC,uBAKbxC,KAAKF,MAAMiD,MACV,cAAC,EAAD,CACElD,WAAYG,KAAKF,MAAMD,WACvBI,OAAQD,KAAKC,OACbC,OAAQF,KAAKgD,eAEb,Y,GAvIM1B,aCGnB+B,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.ecc2722e.chunk.js","sourcesContent":[" // frontend/src/components/Modal.js\n\n import React, { Component } from \"react\";\n import {\n   Button,\n   Modal,\n   ModalHeader,\n   ModalBody,\n   ModalFooter,\n   Form,\n   FormGroup,\n   Input,\n   Label\n } from \"reactstrap\";\n\n export default class CustomModal extends Component {\n   constructor(props) {\n     super(props);\n     this.state = {\n       activeItem: this.props.activeItem\n     };\n   }\n   handleChange = e => {\n     let { name, value } = e.target;\n     if (e.target.type === \"checkbox\") {\n       value = e.target.checked;\n     }\n     const activeItem = { ...this.state.activeItem, [name]: value };\n     this.setState({ activeItem });\n   };\n   render() {\n     const { toggle, onSave } = this.props;\n     return (\n       <Modal isOpen={true} toggle={toggle}>\n         <ModalHeader toggle={toggle}> Todo Item </ModalHeader>\n         <ModalBody>\n           <Form>\n             <FormGroup>\n               <Label for=\"title\">Title</Label>\n               <Input\n                 type=\"text\"\n                 name=\"title\"\n                 value={this.state.activeItem.title}\n                 onChange={this.handleChange}\n                 placeholder=\"Enter Todo Title\"\n               />\n             </FormGroup>\n             <FormGroup>\n               <Label for=\"description\">Description</Label>\n               <Input\n                 type=\"text\"\n                 name=\"description\"\n                 value={this.state.activeItem.description}\n                 onChange={this.handleChange}\n                 placeholder=\"Enter Todo description\"\n               />\n             </FormGroup>\n             <FormGroup check>\n               <Label for=\"completed\">\n                 <Input\n                   type=\"checkbox\"\n                   name=\"completed\"\n                   checked={this.state.activeItem.completed}\n                   onChange={this.handleChange}\n                 />\n                 Completed\n               </Label>\n             </FormGroup>\n           </Form>\n         </ModalBody>\n         <ModalFooter>\n           <Button color=\"success\" onClick={() => onSave(this.state.activeItem)}>\n             Save\n           </Button>\n         </ModalFooter>\n       </Modal>\n     );\n   }\n }"," // frontend/src/App.js\n\n import React, { Component } from \"react\";\n import Modal from \"./components/Modal\";\n import axios from \"axios\";\n\n class App extends Component {\n   constructor(props) {\n     super(props);\n     this.state = {\n       viewCompleted: false,\n       activeItem: {\n         title: \"\",\n         description: \"\",\n         completed: false\n       },\n       todoList: []\n     };\n   }\n   componentDidMount() {\n     this.refreshList();\n   }\n   refreshList = () => {\n     axios\n       .get(\"http://localhost:8000/api/todos/\")\n       .then(res => this.setState({ todoList: res.data }))\n       .catch(err => console.log(err));\n   };\n   displayCompleted = status => {\n     if (status) {\n       return this.setState({ viewCompleted: true });\n     }\n     return this.setState({ viewCompleted: false });\n   };\n   renderTabList = () => {\n     return (\n       <div className=\"my-5 tab-list\">\n         <span\n           onClick={() => this.displayCompleted(true)}\n           className={this.state.viewCompleted ? \"active\" : \"\"}\n         >\n           complete\n         </span>\n         <span\n           onClick={() => this.displayCompleted(false)}\n           className={this.state.viewCompleted ? \"\" : \"active\"}\n         >\n           Incomplete\n         </span>\n       </div>\n     );\n   };\n   renderItems = () => {\n     const { viewCompleted } = this.state;\n     const newItems = this.state.todoList.filter(\n       item => item.completed === viewCompleted\n     );\n     return newItems.map(item => (\n       <li\n         key={item.id}\n         className=\"list-group-item d-flex justify-content-between align-items-center\"\n       >\n         <span\n           className={`todo-title mr-2 ${\n             this.state.viewCompleted ? \"completed-todo\" : \"\"\n           }`}\n           title={item.description}\n         >\n           {item.title}\n         </span>\n         <span>\n           \n           <button\n             onClick={() => this.editItem(item)}\n             className=\"btn btn-secondary mr-2\"\n           >\n             {\" \"}\n             Edit{\" \"}\n           </button>\n           <button\n             onClick={() => this.handleDelete(item)}\n             className=\"btn btn-danger\"\n           >\n             Delete{\" \"}\n           </button>\n         </span>\n       </li>\n     ));\n   };\n   toggle = () => {\n     this.setState({ modal: !this.state.modal });\n   };\n   handleSubmit = item => {\n     this.toggle();\n     if (item.id) {\n       axios\n         .put(`http://localhost:8000/api/todos/${item.id}/`, item)\n         .then(res => this.refreshList());\n       return;\n     }\n     axios\n       .post(\"http://localhost:8000/api/todos/\", item)\n       .then(res => this.refreshList());\n   };\n   handleDelete = item => {\n     axios\n       .delete(`http://localhost:8000/api/todos/${item.id}`)\n       .then(res => this.refreshList());\n   };\n   createItem = () => {\n     const item = { title: \"\", description: \"\", completed: false };\n     this.setState({ activeItem: item, modal: !this.state.modal });\n   };\n   editItem = item => {\n     this.setState({ activeItem: item, modal: !this.state.modal });\n   };\n   render() {\n     return (\n       <main className=\"content\">\n         <h1 className=\"text-white text-uppercase text-center my-4\">Todo app</h1>\n         <div className=\"row \">\n           <div className=\"col-md-6 col-sm-10 mx-auto p-0\">\n             <div className=\"card p-3\">\n               <div className=\"\">\n                 <button onClick={this.createItem} className=\"btn btn-primary\">\n                   Add task\n                 </button>\n               </div>\n               {this.renderTabList()}\n               <ul className=\"list-group list-group-flush\">\n                 {this.renderItems()}\n               </ul>\n             </div>\n           </div>\n         </div>\n         {this.state.modal ? (\n           <Modal\n             activeItem={this.state.activeItem}\n             toggle={this.toggle}\n             onSave={this.handleSubmit}\n           />\n         ) : null}\n       </main>\n     );\n   }\n }\n export default App;","// frontend/src/index.js\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';       // add this\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();"],"sourceRoot":""}