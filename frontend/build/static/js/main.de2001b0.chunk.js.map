{"version":3,"sources":["App/components/Modal.jsx","App/App.jsx","Redux/Actions/todoActions.js","Redux/store.js","Redux/Reducers/todoReducers.js","index.js"],"names":["CustomModal","props","_this","Object","classCallCheck","this","_super","call","handleChange","e","_e$target","target","name","value","type","checked","activeItem","objectSpread","state","defineProperty","setState","_this2","_this$props","toggle","onSave","react_default","a","createElement","reactstrap_es","isOpen","for","title","onChange","placeholder","description","check","completed","color","onClick","Component","App","refreshList","axios","get","then","res","todoList","data","catch","err","console","log","displayCompleted","status","viewCompleted","renderTabList","className","renderItems","filter","item","map","key","id","concat","editItem","handleDelete","modal","handleSubmit","put","post","delete","createItem","Modal_CustomModal","TO_DO","allReducers","combineReducers","ToDoList","arguments","length","undefined","action","payload","store","createStore","ReactDOM","render","es","src_App_App","defaultTODO","document","getElementById"],"mappings":"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","file":"static/js/main.de2001b0.chunk.js","sourcesContent":["// frontend/src/components/Modal.js\n\nimport React, { Component } from \"react\"\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Form,\n  FormGroup,\n  Input,\n  Label,\n} from \"reactstrap\"\n\nexport default class CustomModal extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      // This is where the modal component inherits the activeItem state from App.jsx\n      activeItem: this.props.activeItem,\n    }\n  }\n\n\n  // Function to handle change based on event \n  handleChange = (e) => {\n    let { name, value } = e.target\n    // if the event is a checkbox, then let value equal checked\n    if (e.target.type === \"checkbox\") {\n      value = e.target.checked\n    }\n\n    /* \n    activeItem is inheriting the activeItem state from our local state,\n    in which our local state is inherited from the App.jsx component \n     */\n    \n    const activeItem = { ...this.state.activeItem, [name]: value }\n    \n    \n\n    /*\n    This is done with this syntax because activeItem is passed with our spread operator \n    which changes a singular attribute of an object within a state\n     */ \n    this.setState({ activeItem })\n  }\n\n\n  render() {\n\n    // toggle is the this.toggle function from App.jsx \n    // onSave prop is the.handleSubmit function from App.jsx \n    const { toggle, onSave } = this.props\n\n    return (\n      <Modal isOpen={true} toggle={toggle}>\n        <ModalHeader toggle={toggle}> Todo Item </ModalHeader>\n        <ModalBody>\n          <Form>\n            <FormGroup>\n              <Label for=\"title\">Title</Label>\n              <Input\n                type=\"text\"\n                name=\"title\"\n                value={this.state.activeItem.title}\n                onChange={this.handleChange}\n                placeholder=\"Enter Todo Title\"\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"description\">Description</Label>\n              <Input\n                type=\"text\" \n                name=\"description\"\n                value={this.state.activeItem.description}\n                onChange={this.handleChange}\n                placeholder=\"Enter Todo description\"\n              />\n            </FormGroup>\n            <FormGroup check>\n              <Label for=\"completed\">\n                <Input\n                  type=\"checkbox\"\n                  name=\"completed\"\n                  checked={this.state.activeItem.completed}\n                  onChange={this.handleChange}\n                />\n                Completed\n              </Label>\n            </FormGroup>\n          </Form>\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"success\" onClick={() => onSave(this.state.activeItem)}>\n            Save\n          </Button>\n        </ModalFooter>\n      </Modal>\n    )\n  }\n}\n","import React, { Component } from \"react\";\n import Modal from \"./components/Modal\";\n import axios from \"axios\";\n\n class App extends Component {\n   constructor(props) {\n     super(props);\n     this.state = {\n       viewCompleted: false,\n       activeItem: {\n         title: \"\",\n         description: \"\",\n         completed: false\n       },\n       todoList: [],\n       modal:false \n     };\n   }\n\n   // Once the component is mounted and rendered then execute the refreshlist function \n   componentDidMount() {\n     this.refreshList();\n   }\n\n   // Function to handle the fetching of the backend api to refresh the list \n   refreshList = () => {\n     axios\n       .get(\"https://django-react-tutorial.vercel.app/api/todos/\")\n       .then(res => this.setState({ todoList: res.data }))\n       .catch(err => console.log(err));\n   };\n\n   // Function to handle the changing of the list that you want to view: complete or incomplete \n   displayCompleted = status => {\n     if (status) {\n       return this.setState({ viewCompleted: true });\n     }\n     return this.setState({ viewCompleted: false });\n   };\n\n\n\n   // Function that creates the complete and incomplete buttons \n   renderTabList = () => {\n     return (\n       <div className=\"my-5 tab-list\">\n         <span\n           onClick={() => this.displayCompleted(true)}\n           className={this.state.viewCompleted ? \"active\" : \"\"}\n         >\n           complete\n         </span>\n         <span\n           onClick={() => this.displayCompleted(false)}\n           className={this.state.viewCompleted ? \"\" : \"active\"}\n         >\n           Incomplete\n         </span>\n       </div>\n     );\n   };\n   \n\n   // Function to render the items in the list based on which button you press: complete or incomplete \n   renderItems = () => {\n     // Fetches the local state of the viewCompleted object (what items you want to view: complete or incomplete)\n     const { viewCompleted } = this.state;\n     \n     // Organizing the items in the list by whether or not they are completed or not based on which list you want to view \n     const newItems = this.state.todoList.filter(\n       item => item.completed === viewCompleted\n     );\n    \n     //maps the items in the newItems constant \n     return newItems.map(item => (\n       <li\n         key={item.id}\n         className=\"list-group-item d-flex justify-content-between align-items-center\"\n       >\n         <span\n           className={`todo-title mr-2 ${\n             this.state.viewCompleted ? \"completed-todo\" : \"\"\n           }`}\n           title={item.description}\n         >\n           {item.title}\n         </span>\n         <span>\n           \n           <button\n             onClick={() => this.editItem(item)}\n             className=\"btn btn-secondary mr-2\"\n           >\n             {\" \"}\n             Edit{\" \"}\n           </button>\n           <button\n             onClick={() => this.handleDelete(item)}\n             className=\"btn btn-danger\"\n           >\n             Delete{\" \"}\n           </button>\n         </span>\n       </li>\n     ));\n   };\n\n\n\n\n   // Function to handle the toggling of the modal state \n   toggle = () => {\n     // Toggles the modal state which either shows or doesn't show the modal \n     this.setState({ modal: !this.state.modal });\n   };\n\n\n\n   // Function to handle the submit process of clicking submit \n   handleSubmit = item => {\n\n     // Toggle the modal state to off which stops showing the modal \n     this.toggle();\n     // If already in the database and simply editing the item, then just put the item in 'item's id' location in the DB \n     if (item.id) {\n       axios\n         .put(`https://django-react-tutorial.vercel.app/api/todos/${item.id}/`, item)\n         .then(res => this.refreshList());\n       return;\n     }\n     // Api call to the backend to post a new object in the database \n     axios\n       .post(\"https://django-react-tutorial.vercel.app/api/todos/\", item)\n       .then(res => this.refreshList());\n   };\n\n\n\n   // Function to handle the deleting of an item in the list \n   handleDelete = item => {\n    //  Api call to the backend to delete an object from the list using axios \n     axios\n       .delete(`https://django-react-tutorial.vercel.app/api/todos/${item.id}`)\n       // Once deleted this will run the refreshList function which will fetch all the items from api \n       .then(res => this.refreshList());\n   };\n\n\n\n   // Function designed to add an item in the list \n   createItem = () => {\n\n    //   Creates an item object with attributes that will be passed to the local state \n     const item = { title: \"\", description: \"\", completed: false };\n     this.setState({ \n       // Brings the attributes of the const item to the local state object: activeItem  \n       activeItem: item,\n      // toggles the modal's state to be true \n      modal: !this.state.modal });\n   };\n\n\n\n\n  //  Function designed to edit the item in the list \n   editItem = item => {\n     \n    this.setState({ \n      // Stores the item's info into the local state which is passed into the modal component \n       activeItem: item,\n       // Toggles the modal to show \n      modal: !this.state.modal \n    });\n\n   };\n\n\n  // This is where we render the component  \n   render() {\n     return (\n       <main className=\"content\">\n         <h1 className=\"text-white text-uppercase text-center my-4\">Todo app</h1>\n         <div className=\"row \">\n           <div className=\"col-md-6 col-sm-10 mx-auto p-0\">\n             <div className=\"card p-3\">\n               <div className=\"\">\n                 <button onClick={this.createItem} className=\"btn btn-primary\">\n                   Add task\n                 </button>\n               </div>\n               {this.renderTabList()}\n               <ul className=\"list-group list-group-flush\">\n                 {this.renderItems()}\n               </ul>\n             </div>\n           </div>\n         </div>\n         {this.state.modal ? (\n           <Modal\n             activeItem={this.state.activeItem}\n             toggle={this.toggle}\n             onSave={this.handleSubmit}\n           />\n         ) : null}\n       </main>\n     );\n   }\n }\n\n \n export default App;","export const TO_DO = \"TO_DO\";\n\n// The function, submitValue, is an 'action creator'\n// The return value is an 'action'\nexport function todoAction(value) {\n  \n  return {\n    type: TO_DO,\n    payload: {\n       ToDoList: value,\n    },\n  };\n}\n","import { createStore, combineReducers } from \"redux\";\nimport todoRedcuer from \"./Reducers/todoReducers\";\n\nconst allReducers = combineReducers({\n  ToDoList: todoRedcuer\n});\n\nexport const initalState = {\n  ToDoList : null \n};\n\nexport const store = createStore(allReducers, initalState);\n","import { TO_DO } from \"../Actions/todoActions\";\n\n// null is set as the default value here for state, because Redux will complain if state is undefined.\n// You can set initial state here, but it is recommended on the Redux documentation to preload the state within the redux store.\n// https://redux.js.org/recipes/structuring-reducers/initializing-state\nexport default function todoRedcuer(state = null, action) {\n  switch (action.type) {\n    case TO_DO:\n      return action.payload.ToDoList;\n    default:\n      return state;\n  }\n}\n","// frontend/src/index.js\n\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"bootstrap/dist/css/bootstrap.min.css\" // add this\nimport \"./index.css\"\nimport App from \"./App/App.jsx\"\nimport { store } from \"./Redux/store\";\nimport { Provider } from \"react-redux\";\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n<Provider store={store}>\n    <App defaultTODO={[]}/> \n</Provider>\n\n, document.getElementById(\"root\"))\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}